#!/usr/bin/env -S perl -CA

use strict;
use warnings;
use utf8;
no warnings 'utf8';

# Decodes to UTF-8
sub conv {
    my $buf = shift;

    if (not utf8::decode $buf) {
        require Encode;
        require Encode::Guess;

        my $decoder = Encode::Guess::guess_encoding($buf, qw/cp949 euc-kr/);
        if (ref $decoder) {
            $buf = $decoder->decode($buf);
        } else {
            # Fairly often it works
            $buf = Encode::decode("CP949", $buf);
        }
    }
    return $buf;
}

my $QR_TIME = qr/[0-9][0-9]:[0-9][0-9]:[0-9][0-9],[0-9][0-9][0-9]/;

my $content; { local $/; $content = <STDIN> };

$content = conv $content;
$content .= "\n";

for ($content) {
    tr/\r//d;
    s/\N{U+200B}//gu;
    s/^♪ ♪$//gm;
    s/(^| )-([^-])/$1- $2/gm;
    s/[([][^])]*[])][: ]?//gm;
    s/^- +- //gm;
    s/ - *$//gm;
    s/^(- .*) (- )/$1\n$2/gm;
    s/  +/ /gm;
    s/^([^-][^\n]*) - ([^\n]*)/$1\n$2/gm;
    s/(${QR_TIME}\n)-  *([^\n]*)\n\n/$1$2\n\n/gm;
    s/(${QR_TIME}\n)([^-].{17}[^ \n]*) ([^\n]{4,})/$1$2\n$3/gm;
    s/^ *//gm;
    s/\s*\z/\n/m;
}

print $content;
